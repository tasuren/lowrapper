# lowrapper - Client

from typing import Generic, TypeVar, Literal, Any, Union


Method = Union[Literal[
    "GET", "HEAD", "POST", "PUT", "DELETE", "CONNECT", "OPTIONS", "TRACE", "PATCH"
], str]
ClientT = TypeVar("ClientT", bound="Client")
ResponseT = TypeVar("ResponseT")


class Path(Generic[ResponseT]):
    """Class for creating endpoint's path.

    Parameters
    ----------
    path : str, default ""
        Default endpoint's path.
    client : Client, optional
        This is the `Client`.

    Attributes
    ----------
    path : str
        The path generated by this class.
    client : Optional[Client]"""

    def __init__(self, path: str, client: ClientT):
        self.path, self.client = path, client

    def __call__(self, *args, **kwargs) -> ResponseT:
        assert self.client is not None
        print(self.path)
        if hasattr(self, (path := self.path[:-1][self.path[:-1].rfind("/")+1:])):
            return self.__getattribute__(path)(*args, **kwargs) # type: ignore
        return self.client.request(self, kwargs.pop("method", "GET"), **kwargs)

    def __getitem__(self, extra: str) -> "Path[ResponseT]":
        return self.__getattr__(extra)

    def __getattribute__(self, name: str):
        if name not in ("path", "client") and not name.startswith("_"):
            self.path += f"{name}/"
        return super().__getattribute__(name)

    def __getattr__(self, name: str) -> "Path[ResponseT]":
        self.path += f"{name}/"
        return self

    def __str__(self) -> str:
        return self.path

    def __repr__(self) -> str:
        return f"<Path path={self.path} http={repr(self.client)}>"


class Client(Generic[ResponseT]):
    """This class is a base client class for hitting the API. 
    You can make requests using this class.  
    You can also extend this class and type it to make it easier to use the API on a text editor.

    Parameters
    ----------
    **kwargs : dict
        Class's members."""

    def __init__(self, **kwargs):
        for key in kwargs:
            setattr(self, key, kwargs[key])

    def request(self, path: Any, method: Method, **kwargs) -> ResponseT:
        ...

    def __getattr__(self, name: str) -> Path[ResponseT]:
        return (
            self.__annotations__.get(name) or Path # type: ignore
        )(f"{name}/", self)

    def __repr__(self) -> str:
        return "<HTTPClient>"