# lowrapper - Client

from typing import TYPE_CHECKING, TypeVar, Coroutine, Any, Union, Optional
from enum import Enum

from aiohttp import ClientResponse
import requests

if TYPE_CHECKING:
    from .aio import Client as AioClient


class Methods(Enum):
    GET = 1
    HEAD = 2
    POST = 3
    PUT = 4
    DELETE = 5
    CONNECT = 6
    OPTIONS = 7
    TRACE = 8
    PATCH = 9
Method = Union[Methods, str]
ClientT = TypeVar("ClientT", bound=Union["Client", "AioClient"])
CoroutineResponse = Coroutine[Any, Any, ClientResponse]
Response = Union[requests.Response, CoroutineResponse]


class NotImplemented(Exception):
    ...


class Path:
    """Class for creating endpoint's path.

    Parameters
    ----------
    path : str, default ""
        Default endpoint's path.
    client : Client, optional
        This is the `Client`.

    Attributes
    ----------
    path : str
        The path generated by this class.
    client : Optional[Client]

    Examples
    --------
    ```python
    channel_id = 114514
    path = Path("v2").channels[channel_id].messages
    print("http://api.my.web/" + str(path))
    # http://api.my.web/v2/channels/114514/messages
    ```"""

    def __init__(self, path: str = "", client: ClientT = None):
        self.path, self.client = path, client

    def __call__(self, method: Method, **kwargs) -> Response:
        assert self.client is not None
        return self.client.request(self, method, **kwargs)

    def __getitem__(self, extra: str) -> "Path":
        return self.__getattribute__(extra)

    def __getattribute__(self, name: str) -> "Path":
        if name in ("path", "client") or name.startswith("_"):
            return super().__getattribute__(name)
        else:
            self.path += f"{name}/"
            return self

    def __str__(self) -> str:
        return self.path

    def __repr__(self) -> str:
        return f"<Path path={self.path} http={repr(self.client)}>"


class Client:
    """This class is a base client class for hitting the API. 
    You can make requests using this class.  
    You can also extend this class and type it to make it easier to use the API on a text editor.

    Parameters
    ----------
    **kwargs : dict
        Class's members."""

    def __init__(self, **kwargs):
        for key in kwargs:
            setattr(self, key, kwargs[key])

    def adjustment(self, path: Path, **kwargs) -> dict:
        """This function is called to adjust the arguments passed to requests/aiohttp when making a request.  
        Used to join base URLs, etc.  
        It does nothing initially, so you can override this function or pass it to the adjustment argument when you instantiate the HTTP class.

        Parameters
        ----------
        path : Path
        kwargs : dict

        Examples
        --------
        ```python
        def adjustment(**kwargs):
            kwargs["url"] = f"https://weather.tsukumijima.net/api/forecast{url}"
            return **kwargs
        http = Client()
        http.adjustment = adjustment
        ```"""
        return kwargs

    def _method(self, method):
        return method if isinstance(method, str) else method.name

    def request(self, path: Path, method: Method, **kwargs) -> Response:
        """Do request.

        Parameters
        ----------
        path : Path
        method : Method
        **kwargs : dict"""
        return requests.request(
            self._method(method), **self.adjustment(path, **kwargs)
        )

    def __getattr__(self, name: str) -> Path:
        return Path(f"{name}/", self)

    def __repr__(self) -> str:
        return "<HTTPClient>"